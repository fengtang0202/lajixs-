<template>
  <view class="item-box">
    <view class="items">
      <repeat for="{{list}}" key="item">
        <view class="item">
          <view @touchstart="ts" @touchmove="tm" @touchend="te" data-index="{{index}}" class="inner txt" style="{{item.txtStyle}}">
            {{item.txt}}
          </view>
          <view class="inner del" data-index="{{index}}" bindtap="del({{index}})">删除</view>
        </view>
      </repeat>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'

export default class swiperDel extends wepy.component {
  config = {
    navigationBarTitleText: '购物车'
  };
  props={
    list:{
     type:Array,
     default:[]
    }
  }
  data = {
      delBtnWidth: 180 //单位rpx
  }
  computed = {}
  methods = {
    ts (e) { // 触摸开始
      let that = this
      if (e.touches.length === 1) {
        that.startX = e.touches[0].clientX
      }
      this.list.forEach(el => {
        el.txtStyle=""
      });
    },
    tm (e) {
      let that = this
      if (e.touches.length === 1) {
        let moveX = e.touches[0].clientX 
        let disX = that.startX - moveX
        let txtStyle = ""
        if (disX === 0 || disX < 0) { 
          txtStyle = "left: 0px"
        }else if (disX > 0) { 
          txtStyle = "left:-" + disX + "px"
          if (disX >= that.delBtnWidth) { 
            txtStyle = "left:-" + that.delBtnWidth + "px"
          }
        }
        let index = e.target.dataset.index
        that.list[index].txtStyle = txtStyle
      }
    },
    te (e) { 
      let that = this
      if (e.changedTouches.length === 1) {
        let endX = e.changedTouches[0].clientX
        let disX = that.startX - endX
        let delBtnWidth = that.delBtnWidth
        let txtStyle = disX > delBtnWidth / 2 ? 'left:-'+ delBtnWidth + 'px': 'left:0px'
        let index = e.target.dataset.index
        that.list[index].txtStyle = txtStyle
      }
    },
    del (item) { 
      this.list.splice(item,1)
    }
  }

  events = {}
  initEleWidth () {
    let that = this
    that.delBtnWidth = that.getEleWidth(that.delBtnWidth)
  }

  getEleWidth (w) {  //获取元素自适应后的实际宽度（也就是根据设计稿宽度换算成px像素）
    let real = 0
    try {
      let resWidth = wx.getSystemInfoSync().windowWidth
      let scale = 750 / w
      real = Math.floor(resWidth / scale)
      return real
    }catch (e) {
      return false
    }
  }
  onLoad() {
    this.initEleWidth()
  }
}
</script>
<style>
view {
  box-sizing: border-box;
}

.item-box {
  margin: 0 auto;
}

.items {
  width: 100%;
}

.item {
  position: relative;

  border-top: 2rpx solid#eee;

  height: 120rpx;

  line-height: 120rpx;

  overflow: hidden;
}

.item:last-child {
  border-bottom: 2rpx solid#eee;
}

.inner {
  position: absolute;

  top: 0;
}

.inner.txt {
  background-color: #fff;
  width: 100%;
  z-index: 5;
  padding: 0 10rpx;
  transition: all 0.2s;
  /* white-space: nowrap; */
  /* overflow: hidden; */
  /* text-overflow: ellipsis; */
}

.inner.del {
  background-color: #e64340;
  width: 180rpx;
  text-align: center;
  z-index: 4;
  right: 0;
  color: #fff;
}

.item-icon {
  width: 64rpx;
  vertical-align: middle;
  margin-right: 16rpx;
}
</style>